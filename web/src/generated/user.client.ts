// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "user.proto" (package "user", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user";
import type { DeleteUserResponse } from "./user";
import type { DeleteUserRequest } from "./user";
import type { UpdateUserRequest } from "./user";
import type { CreateUserRequest } from "./user";
import type { UserResponse } from "./user";
import type { GetUserByIdRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetAllUsersResponse } from "./user";
import type { Empty } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service user.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: Index(user.Empty) returns (user.GetAllUsersResponse);
     */
    index(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetAllUsersResponse>;
    /**
     * @generated from protobuf rpc: Get(user.GetUserByIdRequest) returns (user.UserResponse);
     */
    get(input: GetUserByIdRequest, options?: RpcOptions): UnaryCall<GetUserByIdRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: Store(user.CreateUserRequest) returns (user.UserResponse);
     */
    store(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: Patch(user.UpdateUserRequest) returns (user.UserResponse);
     */
    patch(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: Delete(user.DeleteUserRequest) returns (user.DeleteUserResponse);
     */
    delete(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse>;
}
/**
 * @generated from protobuf service user.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Index(user.Empty) returns (user.GetAllUsersResponse);
     */
    index(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetAllUsersResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, GetAllUsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(user.GetUserByIdRequest) returns (user.UserResponse);
     */
    get(input: GetUserByIdRequest, options?: RpcOptions): UnaryCall<GetUserByIdRequest, UserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserByIdRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Store(user.CreateUserRequest) returns (user.UserResponse);
     */
    store(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, UserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Patch(user.UpdateUserRequest) returns (user.UserResponse);
     */
    patch(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UserResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(user.DeleteUserRequest) returns (user.DeleteUserResponse);
     */
    delete(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserResponse>("unary", this._transport, method, opt, input);
    }
}
